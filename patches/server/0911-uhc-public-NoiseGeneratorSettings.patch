From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: balduvian <emmettglaser@gmail.com>
Date: Tue, 17 May 2022 11:12:29 -0700
Subject: [PATCH] uhc-public-NoiseGeneratorSettings


diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
index 47d353221ec88fbaebb92b0bc569bc724611f2f3..ecf1e3f65a3796a5c313154046774cbdde879d52 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseGeneratorSettings.java
@@ -13,18 +13,64 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.levelgen.synth.NormalNoise;
 
-public record NoiseGeneratorSettings(NoiseSettings noiseSettings, BlockState defaultBlock, BlockState defaultFluid, NoiseRouterWithOnlyNoises noiseRouter, SurfaceRules.RuleSource surfaceRule, int seaLevel, boolean disableMobGeneration, boolean aquifersEnabled, boolean oreVeinsEnabled, boolean useLegacyRandomSource) {
-    public static final Codec<NoiseGeneratorSettings> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> {
-        return instance.group(NoiseSettings.CODEC.fieldOf("noise").forGetter(NoiseGeneratorSettings::noiseSettings), BlockState.CODEC.fieldOf("default_block").forGetter(NoiseGeneratorSettings::defaultBlock), BlockState.CODEC.fieldOf("default_fluid").forGetter(NoiseGeneratorSettings::defaultFluid), NoiseRouterWithOnlyNoises.CODEC.fieldOf("noise_router").forGetter(NoiseGeneratorSettings::noiseRouter), SurfaceRules.RuleSource.CODEC.fieldOf("surface_rule").forGetter(NoiseGeneratorSettings::surfaceRule), Codec.INT.fieldOf("sea_level").forGetter(NoiseGeneratorSettings::seaLevel), Codec.BOOL.fieldOf("disable_mob_generation").forGetter(NoiseGeneratorSettings::disableMobGeneration), Codec.BOOL.fieldOf("aquifers_enabled").forGetter(NoiseGeneratorSettings::isAquifersEnabled), Codec.BOOL.fieldOf("ore_veins_enabled").forGetter(NoiseGeneratorSettings::oreVeinsEnabled), Codec.BOOL.fieldOf("legacy_random_source").forGetter(NoiseGeneratorSettings::useLegacyRandomSource)).apply(instance, NoiseGeneratorSettings::new);
+public class NoiseGeneratorSettings {
+    public NoiseSettings noiseSettings;
+    public BlockState defaultBlock;
+    public BlockState defaultFluid;
+    public NoiseRouterWithOnlyNoises noiseRouter;
+    public SurfaceRules.RuleSource surfaceRule;
+    public int seaLevel;
+    public boolean disableMobGeneration;
+    public boolean aquifersEnabled;
+    public boolean oreVeinsEnabled;
+    public boolean useLegacyRandomSource;
+    
+    public NoiseGeneratorSettings(
+        NoiseSettings noiseSettings,
+        BlockState defaultBlock,
+        BlockState defaultFluid,
+        NoiseRouterWithOnlyNoises noiseRouter,
+        SurfaceRules.RuleSource surfaceRule,
+        int seaLevel,
+        boolean disableMobGeneration,
+        boolean aquifersEnabled,
+        boolean oreVeinsEnabled,
+        boolean useLegacyRandomSource
+    ) {
+        this.noiseSettings = noiseSettings;
+        this.defaultBlock = defaultBlock;
+        this.defaultFluid = defaultFluid;
+        this.noiseRouter = noiseRouter;
+        this.surfaceRule = surfaceRule;
+        this.seaLevel = seaLevel;
+        this.disableMobGeneration = disableMobGeneration;
+        this.aquifersEnabled = aquifersEnabled;
+        this.oreVeinsEnabled = oreVeinsEnabled;
+        this.useLegacyRandomSource = useLegacyRandomSource;
+    }
+        
+    public static Codec<NoiseGeneratorSettings> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> {
+        return instance.group(
+            NoiseSettings.CODEC.fieldOf("noise").forGetter((s) -> s.noiseSettings),
+            BlockState.CODEC.fieldOf("default_block").forGetter((s) -> s.defaultBlock),
+            BlockState.CODEC.fieldOf("default_fluid").forGetter((s) -> s.defaultFluid),
+            NoiseRouterWithOnlyNoises.CODEC.fieldOf("noise_router").forGetter((s) -> s.noiseRouter),
+            SurfaceRules.RuleSource.CODEC.fieldOf("surface_rule").forGetter((s) -> s.surfaceRule),
+            Codec.INT.fieldOf("sea_level").forGetter((s) -> s.seaLevel),
+            Codec.BOOL.fieldOf("disable_mob_generation").forGetter((s) -> s.disableMobGeneration),
+            Codec.BOOL.fieldOf("aquifers_enabled").forGetter((s) -> s.aquifersEnabled),
+            Codec.BOOL.fieldOf("ore_veins_enabled").forGetter((s) -> s.oreVeinsEnabled),
+            Codec.BOOL.fieldOf("legacy_random_source").forGetter((s) -> s.useLegacyRandomSource)
+        ).apply(instance, NoiseGeneratorSettings::new);
     });
-    public static final Codec<Holder<NoiseGeneratorSettings>> CODEC = RegistryFileCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, DIRECT_CODEC);
-    public static final ResourceKey<NoiseGeneratorSettings> OVERWORLD = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("overworld"));
-    public static final ResourceKey<NoiseGeneratorSettings> LARGE_BIOMES = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("large_biomes"));
-    public static final ResourceKey<NoiseGeneratorSettings> AMPLIFIED = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("amplified"));
-    public static final ResourceKey<NoiseGeneratorSettings> NETHER = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("nether"));
-    public static final ResourceKey<NoiseGeneratorSettings> END = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("end"));
-    public static final ResourceKey<NoiseGeneratorSettings> CAVES = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("caves"));
-    public static final ResourceKey<NoiseGeneratorSettings> FLOATING_ISLANDS = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("floating_islands"));
+    public static Codec<Holder<NoiseGeneratorSettings>> CODEC = RegistryFileCodec.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, DIRECT_CODEC);
+    public static ResourceKey<NoiseGeneratorSettings> OVERWORLD = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("overworld"));
+    public static ResourceKey<NoiseGeneratorSettings> LARGE_BIOMES = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("large_biomes"));
+    public static ResourceKey<NoiseGeneratorSettings> AMPLIFIED = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("amplified"));
+    public static ResourceKey<NoiseGeneratorSettings> NETHER = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("nether"));
+    public static ResourceKey<NoiseGeneratorSettings> END = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("end"));
+    public static ResourceKey<NoiseGeneratorSettings> CAVES = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("caves"));
+    public static ResourceKey<NoiseGeneratorSettings> FLOATING_ISLANDS = ResourceKey.create(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, new ResourceLocation("floating_islands"));
 
     public boolean isAquifersEnabled() {
         return this.aquifersEnabled;
@@ -38,7 +84,7 @@ public record NoiseGeneratorSettings(NoiseSettings noiseSettings, BlockState def
         return NoiseRouterData.createNoiseRouter(this.noiseSettings, l, registry, this.getRandomSource(), this.noiseRouter);
     }
 
-    private static void register(ResourceKey<NoiseGeneratorSettings> registryKey, NoiseGeneratorSettings settings) {
+    public static void register(ResourceKey<NoiseGeneratorSettings> registryKey, NoiseGeneratorSettings settings) {
         BuiltinRegistries.register(BuiltinRegistries.NOISE_GENERATOR_SETTINGS, registryKey.location(), settings);
     }
 
@@ -46,24 +92,24 @@ public record NoiseGeneratorSettings(NoiseSettings noiseSettings, BlockState def
         return BuiltinRegistries.NOISE_GENERATOR_SETTINGS.holders().iterator().next();
     }
 
-    private static NoiseGeneratorSettings end() {
+    public static NoiseGeneratorSettings end() {
         return new NoiseGeneratorSettings(NoiseSettings.END_NOISE_SETTINGS, Blocks.END_STONE.defaultBlockState(), Blocks.AIR.defaultBlockState(), NoiseRouterData.end(NoiseSettings.END_NOISE_SETTINGS), SurfaceRuleData.end(), 0, true, false, false, true);
     }
 
-    private static NoiseGeneratorSettings nether() {
+    public static NoiseGeneratorSettings nether() {
         return new NoiseGeneratorSettings(NoiseSettings.NETHER_NOISE_SETTINGS, Blocks.NETHERRACK.defaultBlockState(), Blocks.LAVA.defaultBlockState(), NoiseRouterData.nether(NoiseSettings.NETHER_NOISE_SETTINGS), SurfaceRuleData.nether(), 32, false, false, false, true);
     }
 
-    private static NoiseGeneratorSettings overworld(boolean amplified, boolean largeBiomes) {
+    public static NoiseGeneratorSettings overworld(boolean amplified, boolean largeBiomes) {
         NoiseSettings noiseSettings = NoiseSettings.overworldNoiseSettings(amplified);
         return new NoiseGeneratorSettings(noiseSettings, Blocks.STONE.defaultBlockState(), Blocks.WATER.defaultBlockState(), NoiseRouterData.overworld(noiseSettings, largeBiomes), SurfaceRuleData.overworld(), 63, false, true, true, false);
     }
 
-    private static NoiseGeneratorSettings caves() {
+    public static NoiseGeneratorSettings caves() {
         return new NoiseGeneratorSettings(NoiseSettings.CAVES_NOISE_SETTINGS, Blocks.STONE.defaultBlockState(), Blocks.WATER.defaultBlockState(), NoiseRouterData.overworldWithoutCaves(NoiseSettings.CAVES_NOISE_SETTINGS), SurfaceRuleData.overworldLike(false, true, true), 32, false, false, false, true);
     }
 
-    private static NoiseGeneratorSettings floatingIslands() {
+    public static NoiseGeneratorSettings floatingIslands() {
         return new NoiseGeneratorSettings(NoiseSettings.FLOATING_ISLANDS_NOISE_SETTINGS, Blocks.STONE.defaultBlockState(), Blocks.WATER.defaultBlockState(), NoiseRouterData.overworldWithoutCaves(NoiseSettings.FLOATING_ISLANDS_NOISE_SETTINGS), SurfaceRuleData.overworldLike(false, false, false), -64, false, false, false, true);
     }
 
