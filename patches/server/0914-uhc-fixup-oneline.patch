From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: balduvian <emmettglaser@gmail.com>
Date: Tue, 17 May 2022 11:42:32 -0700
Subject: [PATCH] uhc-fixup-oneline


diff --git a/src/main/java/net/minecraft/data/worldgen/SurfaceRuleData.java b/src/main/java/net/minecraft/data/worldgen/SurfaceRuleData.java
index 61ff899aa03b5248e6f1d2bfb5167ac19927e0ad..4f7be2457338ae9073b161805c5eacfa80182ad4 100644
--- a/src/main/java/net/minecraft/data/worldgen/SurfaceRuleData.java
+++ b/src/main/java/net/minecraft/data/worldgen/SurfaceRuleData.java
@@ -10,42 +10,42 @@ import net.minecraft.world.level.levelgen.SurfaceRules;
 import net.minecraft.world.level.levelgen.VerticalAnchor;
 
 public class SurfaceRuleData {
-    private static final SurfaceRules.RuleSource AIR = makeStateRule(Blocks.AIR);
-    private static final SurfaceRules.RuleSource BEDROCK = makeStateRule(Blocks.BEDROCK);
-    private static final SurfaceRules.RuleSource WHITE_TERRACOTTA = makeStateRule(Blocks.WHITE_TERRACOTTA);
-    private static final SurfaceRules.RuleSource ORANGE_TERRACOTTA = makeStateRule(Blocks.ORANGE_TERRACOTTA);
-    private static final SurfaceRules.RuleSource TERRACOTTA = makeStateRule(Blocks.TERRACOTTA);
-    private static final SurfaceRules.RuleSource RED_SAND = makeStateRule(Blocks.RED_SAND);
-    private static final SurfaceRules.RuleSource RED_SANDSTONE = makeStateRule(Blocks.RED_SANDSTONE);
-    private static final SurfaceRules.RuleSource STONE = makeStateRule(Blocks.STONE);
-    private static final SurfaceRules.RuleSource DEEPSLATE = makeStateRule(Blocks.DEEPSLATE);
-    private static final SurfaceRules.RuleSource DIRT = makeStateRule(Blocks.DIRT);
-    private static final SurfaceRules.RuleSource PODZOL = makeStateRule(Blocks.PODZOL);
-    private static final SurfaceRules.RuleSource COARSE_DIRT = makeStateRule(Blocks.COARSE_DIRT);
-    private static final SurfaceRules.RuleSource MYCELIUM = makeStateRule(Blocks.MYCELIUM);
-    private static final SurfaceRules.RuleSource GRASS_BLOCK = makeStateRule(Blocks.GRASS_BLOCK);
-    private static final SurfaceRules.RuleSource CALCITE = makeStateRule(Blocks.CALCITE);
-    private static final SurfaceRules.RuleSource GRAVEL = makeStateRule(Blocks.GRAVEL);
-    private static final SurfaceRules.RuleSource SAND = makeStateRule(Blocks.SAND);
-    private static final SurfaceRules.RuleSource SANDSTONE = makeStateRule(Blocks.SANDSTONE);
-    private static final SurfaceRules.RuleSource PACKED_ICE = makeStateRule(Blocks.PACKED_ICE);
-    private static final SurfaceRules.RuleSource SNOW_BLOCK = makeStateRule(Blocks.SNOW_BLOCK);
-    private static final SurfaceRules.RuleSource POWDER_SNOW = makeStateRule(Blocks.POWDER_SNOW);
-    private static final SurfaceRules.RuleSource ICE = makeStateRule(Blocks.ICE);
-    private static final SurfaceRules.RuleSource WATER = makeStateRule(Blocks.WATER);
-    private static final SurfaceRules.RuleSource LAVA = makeStateRule(Blocks.LAVA);
-    private static final SurfaceRules.RuleSource NETHERRACK = makeStateRule(Blocks.NETHERRACK);
-    private static final SurfaceRules.RuleSource SOUL_SAND = makeStateRule(Blocks.SOUL_SAND);
-    private static final SurfaceRules.RuleSource SOUL_SOIL = makeStateRule(Blocks.SOUL_SOIL);
-    private static final SurfaceRules.RuleSource BASALT = makeStateRule(Blocks.BASALT);
-    private static final SurfaceRules.RuleSource BLACKSTONE = makeStateRule(Blocks.BLACKSTONE);
-    private static final SurfaceRules.RuleSource WARPED_WART_BLOCK = makeStateRule(Blocks.WARPED_WART_BLOCK);
-    private static final SurfaceRules.RuleSource WARPED_NYLIUM = makeStateRule(Blocks.WARPED_NYLIUM);
-    private static final SurfaceRules.RuleSource NETHER_WART_BLOCK = makeStateRule(Blocks.NETHER_WART_BLOCK);
-    private static final SurfaceRules.RuleSource CRIMSON_NYLIUM = makeStateRule(Blocks.CRIMSON_NYLIUM);
-    private static final SurfaceRules.RuleSource ENDSTONE = makeStateRule(Blocks.END_STONE);
-
-    private static SurfaceRules.RuleSource makeStateRule(Block block) {
+    public static SurfaceRules.RuleSource AIR = makeStateRule(Blocks.AIR);
+    public static SurfaceRules.RuleSource BEDROCK = makeStateRule(Blocks.BEDROCK);
+    public static SurfaceRules.RuleSource WHITE_TERRACOTTA = makeStateRule(Blocks.WHITE_TERRACOTTA);
+    public static SurfaceRules.RuleSource ORANGE_TERRACOTTA = makeStateRule(Blocks.ORANGE_TERRACOTTA);
+    public static SurfaceRules.RuleSource TERRACOTTA = makeStateRule(Blocks.TERRACOTTA);
+    public static SurfaceRules.RuleSource RED_SAND = makeStateRule(Blocks.RED_SAND);
+    public static SurfaceRules.RuleSource RED_SANDSTONE = makeStateRule(Blocks.RED_SANDSTONE);
+    public static SurfaceRules.RuleSource STONE = makeStateRule(Blocks.STONE);
+    public static SurfaceRules.RuleSource DEEPSLATE = makeStateRule(Blocks.DEEPSLATE);
+    public static SurfaceRules.RuleSource DIRT = makeStateRule(Blocks.DIRT);
+    public static SurfaceRules.RuleSource PODZOL = makeStateRule(Blocks.PODZOL);
+    public static SurfaceRules.RuleSource COARSE_DIRT = makeStateRule(Blocks.COARSE_DIRT);
+    public static SurfaceRules.RuleSource MYCELIUM = makeStateRule(Blocks.MYCELIUM);
+    public static SurfaceRules.RuleSource GRASS_BLOCK = makeStateRule(Blocks.GRASS_BLOCK);
+    public static SurfaceRules.RuleSource CALCITE = makeStateRule(Blocks.CALCITE);
+    public static SurfaceRules.RuleSource GRAVEL = makeStateRule(Blocks.GRAVEL);
+    public static SurfaceRules.RuleSource SAND = makeStateRule(Blocks.SAND);
+    public static SurfaceRules.RuleSource SANDSTONE = makeStateRule(Blocks.SANDSTONE);
+    public static SurfaceRules.RuleSource PACKED_ICE = makeStateRule(Blocks.PACKED_ICE);
+    public static SurfaceRules.RuleSource SNOW_BLOCK = makeStateRule(Blocks.SNOW_BLOCK);
+    public static SurfaceRules.RuleSource POWDER_SNOW = makeStateRule(Blocks.POWDER_SNOW);
+    public static SurfaceRules.RuleSource ICE = makeStateRule(Blocks.ICE);
+    public static SurfaceRules.RuleSource WATER = makeStateRule(Blocks.WATER);
+    public static SurfaceRules.RuleSource LAVA = makeStateRule(Blocks.LAVA);
+    public static SurfaceRules.RuleSource NETHERRACK = makeStateRule(Blocks.NETHERRACK);
+    public static SurfaceRules.RuleSource SOUL_SAND = makeStateRule(Blocks.SOUL_SAND);
+    public static SurfaceRules.RuleSource SOUL_SOIL = makeStateRule(Blocks.SOUL_SOIL);
+    public static SurfaceRules.RuleSource BASALT = makeStateRule(Blocks.BASALT);
+    public static SurfaceRules.RuleSource BLACKSTONE = makeStateRule(Blocks.BLACKSTONE);
+    public static SurfaceRules.RuleSource WARPED_WART_BLOCK = makeStateRule(Blocks.WARPED_WART_BLOCK);
+    public static SurfaceRules.RuleSource WARPED_NYLIUM = makeStateRule(Blocks.WARPED_NYLIUM);
+    public static SurfaceRules.RuleSource NETHER_WART_BLOCK = makeStateRule(Blocks.NETHER_WART_BLOCK);
+    public static SurfaceRules.RuleSource CRIMSON_NYLIUM = makeStateRule(Blocks.CRIMSON_NYLIUM);
+    public static SurfaceRules.RuleSource ENDSTONE = makeStateRule(Blocks.END_STONE);
+
+    public static SurfaceRules.RuleSource makeStateRule(Block block) {
         return SurfaceRules.state(block.defaultBlockState());
     }
 
@@ -58,7 +58,7 @@ public class SurfaceRuleData {
     // isRoof = true if roof, false if floor
     public record PaperBedrockConditionSource(net.minecraft.resources.ResourceLocation randomName, VerticalAnchor trueAtAndBelow, VerticalAnchor falseAtAndAbove, boolean isRoof) implements SurfaceRules.ConditionSource {
 
-        public static final com.mojang.serialization.Codec<PaperBedrockConditionSource> CODEC = com.mojang.serialization.codecs.RecordCodecBuilder.create((instance) -> {
+        public static com.mojang.serialization.Codec<PaperBedrockConditionSource> CODEC = com.mojang.serialization.codecs.RecordCodecBuilder.create((instance) -> {
             return instance.group(
                 net.minecraft.resources.ResourceLocation.CODEC.fieldOf("random_name").forGetter(PaperBedrockConditionSource::randomName),
                 VerticalAnchor.CODEC.fieldOf("true_at_and_below").forGetter(PaperBedrockConditionSource::trueAtAndBelow),
@@ -83,17 +83,17 @@ public class SurfaceRuleData {
             int falseAtY = this.falseAtAndAbove().resolveY(context.context);
 
             int y = isRoof ? Math.max(falseAtY, trueAtY) - 1 : Math.min(falseAtY, trueAtY) ;
-            final int i = hasFlatBedrock ? y : trueAtY;
-            final int j = hasFlatBedrock ? y : falseAtY;
-            final net.minecraft.world.level.levelgen.PositionalRandomFactory positionalRandomFactory = context.system.getOrCreateRandomFactory(this.randomName());
-
+            int i = hasFlatBedrock ? y : trueAtY;
+            int j = hasFlatBedrock ? y : falseAtY;
+            net.minecraft.world.level.levelgen.PositionalRandomFactory positionalRandomFactory = context.system.getOrCreateRandomFactory(this.randomName());
+    
             class VerticalGradientCondition extends SurfaceRules.LazyYCondition {
-                VerticalGradientCondition(SurfaceRules.Context context) {
+                public VerticalGradientCondition(SurfaceRules.Context context) {
                     super(context);
                 }
 
                 @Override
-                protected boolean compute() {
+                public boolean compute() {
                     int y = this.context.blockY;
                     if (y <= i) {
                         return true;
@@ -177,7 +177,7 @@ public class SurfaceRuleData {
         return ENDSTONE;
     }
 
-    private static SurfaceRules.ConditionSource surfaceNoiseAbove(double min) {
+    public static SurfaceRules.ConditionSource surfaceNoiseAbove(double min) {
         return SurfaceRules.noiseCondition(Noises.SURFACE, min / 8.25D, Double.MAX_VALUE);
     }
 }
