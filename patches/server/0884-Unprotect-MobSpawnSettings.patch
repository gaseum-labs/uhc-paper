From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: balduvian <emmettglaser@gmail.com>
Date: Thu, 17 Mar 2022 20:47:20 -0700
Subject: [PATCH] Unprotect MobSpawnSettings


diff --git a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
index c38b4deafd2e43f2021d28388228cd53b230e61b..455094e117bc40f0d0a525bdcf797939b5e076ef 100644
--- a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
@@ -1,17 +1,11 @@
 package net.minecraft.world.level.biome;
 
 import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.stream.Stream;
-import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
 import net.minecraft.util.StringRepresentable;
@@ -22,25 +16,28 @@ import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobCategory;
 import org.slf4j.Logger;
 
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.stream.Stream;
+
 public class MobSpawnSettings {
-    private static final Logger LOGGER = LogUtils.getLogger();
-    private static final float DEFAULT_CREATURE_SPAWN_PROBABILITY = 0.1F;
-    public static final WeightedRandomList<MobSpawnSettings.SpawnerData> EMPTY_MOB_LIST = WeightedRandomList.create();
-    public static final MobSpawnSettings EMPTY = (new MobSpawnSettings.Builder()).build();
-    public static final MapCodec<MobSpawnSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
-        return instance.group(Codec.floatRange(0.0F, 0.9999999F).optionalFieldOf("creature_spawn_probability", 0.1F).forGetter((mobSpawnSettings) -> {
-            return mobSpawnSettings.creatureGenerationProbability;
-        }), Codec.simpleMap(MobCategory.CODEC, WeightedRandomList.codec(MobSpawnSettings.SpawnerData.CODEC).promotePartial(Util.prefix("Spawn data: ", LOGGER::error)), StringRepresentable.keys(MobCategory.values())).fieldOf("spawners").forGetter((mobSpawnSettings) -> {
-            return mobSpawnSettings.spawners;
-        }), Codec.simpleMap(Registry.ENTITY_TYPE.byNameCodec(), MobSpawnSettings.MobSpawnCost.CODEC, Registry.ENTITY_TYPE).fieldOf("spawn_costs").forGetter((mobSpawnSettings) -> {
-            return mobSpawnSettings.mobSpawnCosts;
-        })).apply(instance, MobSpawnSettings::new);
-    });
-    private final float creatureGenerationProbability;
-    private final Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> spawners;
-    private final Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> mobSpawnCosts;
-
-    MobSpawnSettings(float creatureSpawnProbability, Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> spawners, Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> spawnCosts) {
+    public static Logger LOGGER = LogUtils.getLogger();
+    public static float DEFAULT_CREATURE_SPAWN_PROBABILITY = 0.1F;
+    public static WeightedRandomList<MobSpawnSettings.SpawnerData> EMPTY_MOB_LIST = WeightedRandomList.create();
+    public static MobSpawnSettings EMPTY = (new MobSpawnSettings.Builder()).build();
+    public static MapCodec<MobSpawnSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(
+        Codec.floatRange(0.0F, 0.9999999F).optionalFieldOf("creature_spawn_probability", 0.1F).forGetter((mobSpawnSettings) -> mobSpawnSettings.creatureGenerationProbability),
+        Codec.simpleMap(MobCategory.CODEC, WeightedRandomList.codec(SpawnerData.CODEC).promotePartial(Util.prefix("Spawn data: ", LOGGER::error)),
+            StringRepresentable.keys(MobCategory.values())).fieldOf("spawners").forGetter((mobSpawnSettings) -> mobSpawnSettings.spawners),
+        Codec.simpleMap(Registry.ENTITY_TYPE.byNameCodec(), MobSpawnCost.CODEC, Registry.ENTITY_TYPE).fieldOf("spawn_costs").forGetter((mobSpawnSettings) -> mobSpawnSettings.mobSpawnCosts)
+    ).apply(instance, MobSpawnSettings::new));
+    public float creatureGenerationProbability;
+    public Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> spawners;
+    public Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> mobSpawnCosts;
+
+    public MobSpawnSettings(float creatureSpawnProbability, Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> spawners, Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> spawnCosts) {
         this.creatureGenerationProbability = creatureSpawnProbability;
         this.spawners = ImmutableMap.copyOf(spawners);
         this.mobSpawnCosts = ImmutableMap.copyOf(spawnCosts);
@@ -91,14 +88,14 @@ public class MobSpawnSettings {
             }
         }
         // use toImmutableEnumMap collector
-        private final Map<MobCategory, List<MobSpawnSettings.SpawnerData>> spawners = (Map) Stream.of(MobCategory.values()).collect(Maps.toImmutableEnumMap((mobCategory) -> {
+        public Map<MobCategory, List<MobSpawnSettings.SpawnerData>> spawners = Stream.of(MobCategory.values()).collect(Maps.toImmutableEnumMap((mobCategory) -> {
             return mobCategory;
         }, (mobCategory) -> {
             return new MobList(); // Use MobList instead of ArrayList
         }));
         // Paper end
-        private final Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> mobSpawnCosts = Maps.newLinkedHashMap();
-        private float creatureGenerationProbability = 0.1F;
+        public Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> mobSpawnCosts = Maps.newLinkedHashMap();
+        public float creatureGenerationProbability = 0.1F;
 
         public MobSpawnSettings.Builder addSpawn(MobCategory spawnGroup, MobSpawnSettings.SpawnerData spawnEntry) {
             this.spawners.get(spawnGroup).add(spawnEntry);
@@ -123,17 +120,17 @@ public class MobSpawnSettings {
     }
 
     public static class MobSpawnCost {
-        public static final Codec<MobSpawnSettings.MobSpawnCost> CODEC = RecordCodecBuilder.create((instance) -> {
+        public static Codec<MobSpawnSettings.MobSpawnCost> CODEC = RecordCodecBuilder.create((instance) -> {
             return instance.group(Codec.DOUBLE.fieldOf("energy_budget").forGetter((mobSpawnCost) -> {
                 return mobSpawnCost.energyBudget;
             }), Codec.DOUBLE.fieldOf("charge").forGetter((mobSpawnCost) -> {
                 return mobSpawnCost.charge;
             })).apply(instance, MobSpawnSettings.MobSpawnCost::new);
         });
-        private final double energyBudget;
-        private final double charge;
+        public double energyBudget;
+        public double charge;
 
-        MobSpawnCost(double gravityLimit, double mass) {
+        public MobSpawnCost(double gravityLimit, double mass) {
             this.energyBudget = gravityLimit;
             this.charge = mass;
         }
@@ -148,18 +145,15 @@ public class MobSpawnSettings {
     }
 
     public static class SpawnerData extends WeightedEntry.IntrusiveBase {
-        public static final Codec<MobSpawnSettings.SpawnerData> CODEC = RecordCodecBuilder.create((instance) -> {
-            return instance.group(Registry.ENTITY_TYPE.byNameCodec().fieldOf("type").forGetter((spawnerData) -> {
-                return spawnerData.type;
-            }), Weight.CODEC.fieldOf("weight").forGetter(WeightedEntry.IntrusiveBase::getWeight), Codec.INT.fieldOf("minCount").forGetter((spawnerData) -> {
-                return spawnerData.minCount;
-            }), Codec.INT.fieldOf("maxCount").forGetter((spawnerData) -> {
-                return spawnerData.maxCount;
-            })).apply(instance, MobSpawnSettings.SpawnerData::new);
-        });
-        public final EntityType<?> type;
-        public final int minCount;
-        public final int maxCount;
+        public static Codec<MobSpawnSettings.SpawnerData> CODEC = RecordCodecBuilder.create((instance) -> instance.group(
+            Registry.ENTITY_TYPE.byNameCodec().fieldOf("type").forGetter((spawnerData) -> spawnerData.type),
+            Weight.CODEC.fieldOf("weight").forGetter(IntrusiveBase::getWeight),
+            Codec.INT.fieldOf("minCount").forGetter((spawnerData) -> spawnerData.minCount),
+            Codec.INT.fieldOf("maxCount").forGetter((spawnerData) -> spawnerData.maxCount)
+        ).apply(instance, SpawnerData::new));
+        public EntityType<?> type;
+        public int minCount;
+        public int maxCount;
 
         public SpawnerData(EntityType<?> type, int weight, int minGroupSize, int maxGroupSize) {
             this(type, Weight.of(weight), minGroupSize, maxGroupSize);
