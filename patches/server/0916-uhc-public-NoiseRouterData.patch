From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: balduvian <emmettglaser@gmail.com>
Date: Thu, 19 May 2022 00:02:09 -0700
Subject: [PATCH] uhc-public-NoiseRouterData


diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseRouterData.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseRouterData.java
index 1ad50e1e4b661c8405afbb6df4341cb18c863997..7d264d1d2d699666cfb29ee07d2ecf34712232a9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseRouterData.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseRouterData.java
@@ -18,41 +18,41 @@ import net.minecraft.world.level.levelgen.synth.BlendedNoise;
 import net.minecraft.world.level.levelgen.synth.NormalNoise;
 
 public class NoiseRouterData {
-    private static final float ORE_THICKNESS = 0.08F;
-    private static final double VEININESS_FREQUENCY = 1.5D;
-    private static final double NOODLE_SPACING_AND_STRAIGHTNESS = 1.5D;
-    private static final double SURFACE_DENSITY_THRESHOLD = 1.5625D;
-    private static final DensityFunction BLENDING_FACTOR = DensityFunctions.constant(10.0D);
-    private static final DensityFunction BLENDING_JAGGEDNESS = DensityFunctions.zero();
-    private static final ResourceKey<DensityFunction> ZERO = createKey("zero");
-    private static final ResourceKey<DensityFunction> Y = createKey("y");
-    private static final ResourceKey<DensityFunction> SHIFT_X = createKey("shift_x");
-    private static final ResourceKey<DensityFunction> SHIFT_Z = createKey("shift_z");
-    private static final ResourceKey<DensityFunction> BASE_3D_NOISE = createKey("overworld/base_3d_noise");
-    private static final ResourceKey<DensityFunction> CONTINENTS = createKey("overworld/continents");
-    private static final ResourceKey<DensityFunction> EROSION = createKey("overworld/erosion");
-    private static final ResourceKey<DensityFunction> RIDGES = createKey("overworld/ridges");
-    private static final ResourceKey<DensityFunction> FACTOR = createKey("overworld/factor");
-    private static final ResourceKey<DensityFunction> DEPTH = createKey("overworld/depth");
-    private static final ResourceKey<DensityFunction> SLOPED_CHEESE = createKey("overworld/sloped_cheese");
-    private static final ResourceKey<DensityFunction> CONTINENTS_LARGE = createKey("overworld_large_biomes/continents");
-    private static final ResourceKey<DensityFunction> EROSION_LARGE = createKey("overworld_large_biomes/erosion");
-    private static final ResourceKey<DensityFunction> FACTOR_LARGE = createKey("overworld_large_biomes/factor");
-    private static final ResourceKey<DensityFunction> DEPTH_LARGE = createKey("overworld_large_biomes/depth");
-    private static final ResourceKey<DensityFunction> SLOPED_CHEESE_LARGE = createKey("overworld_large_biomes/sloped_cheese");
-    private static final ResourceKey<DensityFunction> SLOPED_CHEESE_END = createKey("end/sloped_cheese");
-    private static final ResourceKey<DensityFunction> SPAGHETTI_ROUGHNESS_FUNCTION = createKey("overworld/caves/spaghetti_roughness_function");
-    private static final ResourceKey<DensityFunction> ENTRANCES = createKey("overworld/caves/entrances");
-    private static final ResourceKey<DensityFunction> NOODLE = createKey("overworld/caves/noodle");
-    private static final ResourceKey<DensityFunction> PILLARS = createKey("overworld/caves/pillars");
-    private static final ResourceKey<DensityFunction> SPAGHETTI_2D_THICKNESS_MODULATOR = createKey("overworld/caves/spaghetti_2d_thickness_modulator");
-    private static final ResourceKey<DensityFunction> SPAGHETTI_2D = createKey("overworld/caves/spaghetti_2d");
-
-    protected static NoiseRouterWithOnlyNoises overworld(NoiseSettings noiseSettings, boolean bl) {
+    public static float ORE_THICKNESS = 0.08F;
+    public static double VEININESS_FREQUENCY = 1.5D;
+    public static double NOODLE_SPACING_AND_STRAIGHTNESS = 1.5D;
+    public static double SURFACE_DENSITY_THRESHOLD = 1.5625D;
+    public static DensityFunction BLENDING_FACTOR = DensityFunctions.constant(10.0D);
+    public static DensityFunction BLENDING_JAGGEDNESS = DensityFunctions.zero();
+    public static ResourceKey<DensityFunction> ZERO = createKey("zero");
+    public static ResourceKey<DensityFunction> Y = createKey("y");
+    public static ResourceKey<DensityFunction> SHIFT_X = createKey("shift_x");
+    public static ResourceKey<DensityFunction> SHIFT_Z = createKey("shift_z");
+    public static ResourceKey<DensityFunction> BASE_3D_NOISE = createKey("overworld/base_3d_noise");
+    public static ResourceKey<DensityFunction> CONTINENTS = createKey("overworld/continents");
+    public static ResourceKey<DensityFunction> EROSION = createKey("overworld/erosion");
+    public static ResourceKey<DensityFunction> RIDGES = createKey("overworld/ridges");
+    public static ResourceKey<DensityFunction> FACTOR = createKey("overworld/factor");
+    public static ResourceKey<DensityFunction> DEPTH = createKey("overworld/depth");
+    public static ResourceKey<DensityFunction> SLOPED_CHEESE = createKey("overworld/sloped_cheese");
+    public static ResourceKey<DensityFunction> CONTINENTS_LARGE = createKey("overworld_large_biomes/continents");
+    public static ResourceKey<DensityFunction> EROSION_LARGE = createKey("overworld_large_biomes/erosion");
+    public static ResourceKey<DensityFunction> FACTOR_LARGE = createKey("overworld_large_biomes/factor");
+    public static ResourceKey<DensityFunction> DEPTH_LARGE = createKey("overworld_large_biomes/depth");
+    public static ResourceKey<DensityFunction> SLOPED_CHEESE_LARGE = createKey("overworld_large_biomes/sloped_cheese");
+    public static ResourceKey<DensityFunction> SLOPED_CHEESE_END = createKey("end/sloped_cheese");
+    public static ResourceKey<DensityFunction> SPAGHETTI_ROUGHNESS_FUNCTION = createKey("overworld/caves/spaghetti_roughness_function");
+    public static ResourceKey<DensityFunction> ENTRANCES = createKey("overworld/caves/entrances");
+    public static ResourceKey<DensityFunction> NOODLE = createKey("overworld/caves/noodle");
+    public static ResourceKey<DensityFunction> PILLARS = createKey("overworld/caves/pillars");
+    public static ResourceKey<DensityFunction> SPAGHETTI_2D_THICKNESS_MODULATOR = createKey("overworld/caves/spaghetti_2d_thickness_modulator");
+    public static ResourceKey<DensityFunction> SPAGHETTI_2D = createKey("overworld/caves/spaghetti_2d");
+
+    public static NoiseRouterWithOnlyNoises overworld(NoiseSettings noiseSettings, boolean bl) {
         return overworldWithNewCaves(noiseSettings, bl);
     }
 
-    private static ResourceKey<DensityFunction> createKey(String id) {
+    public static ResourceKey<DensityFunction> createKey(String id) {
         return ResourceKey.create(Registry.DENSITY_FUNCTION_REGISTRY, new ResourceLocation(id));
     }
 
@@ -88,32 +88,32 @@ public class NoiseRouterData {
         return BuiltinRegistries.DENSITY_FUNCTION.holders().iterator().next();
     }
 
-    private static DensityFunction register(ResourceKey<DensityFunction> resourceKey, DensityFunction densityFunction) {
+    public static DensityFunction register(ResourceKey<DensityFunction> resourceKey, DensityFunction densityFunction) {
         return new DensityFunctions.HolderHolder(BuiltinRegistries.register(BuiltinRegistries.DENSITY_FUNCTION, resourceKey, densityFunction));
     }
 
-    private static Holder<NormalNoise.NoiseParameters> getNoise(ResourceKey<NormalNoise.NoiseParameters> resourceKey) {
+    public static Holder<NormalNoise.NoiseParameters> getNoise(ResourceKey<NormalNoise.NoiseParameters> resourceKey) {
         return BuiltinRegistries.NOISE.getHolderOrThrow(resourceKey);
     }
 
-    private static DensityFunction getFunction(ResourceKey<DensityFunction> resourceKey) {
+    public static DensityFunction getFunction(ResourceKey<DensityFunction> resourceKey) {
         return new DensityFunctions.HolderHolder(BuiltinRegistries.DENSITY_FUNCTION.getHolderOrThrow(resourceKey));
     }
 
-    private static DensityFunction slopedCheese(DensityFunction densityFunction, DensityFunction densityFunction2, DensityFunction densityFunction3, DensityFunction densityFunction4, DensityFunction densityFunction5, DensityFunction densityFunction6) {
+    public static DensityFunction slopedCheese(DensityFunction densityFunction, DensityFunction densityFunction2, DensityFunction densityFunction3, DensityFunction densityFunction4, DensityFunction densityFunction5, DensityFunction densityFunction6) {
         DensityFunction densityFunction7 = splineWithBlending(densityFunction, densityFunction2, densityFunction3, DensityFunctions.TerrainShaperSpline.SplineType.JAGGEDNESS, 0.0D, 1.28D, BLENDING_JAGGEDNESS);
         DensityFunction densityFunction8 = DensityFunctions.mul(densityFunction7, densityFunction6.halfNegative());
         DensityFunction densityFunction9 = noiseGradientDensity(densityFunction4, DensityFunctions.add(densityFunction5, densityFunction8));
         return DensityFunctions.add(densityFunction9, getFunction(BASE_3D_NOISE));
     }
 
-    private static DensityFunction spaghettiRoughnessFunction() {
+    public static DensityFunction spaghettiRoughnessFunction() {
         DensityFunction densityFunction = DensityFunctions.noise(getNoise(Noises.SPAGHETTI_ROUGHNESS));
         DensityFunction densityFunction2 = DensityFunctions.mappedNoise(getNoise(Noises.SPAGHETTI_ROUGHNESS_MODULATOR), 0.0D, -0.1D);
         return DensityFunctions.cacheOnce(DensityFunctions.mul(densityFunction2, DensityFunctions.add(densityFunction.abs(), DensityFunctions.constant(-0.4D))));
     }
 
-    private static DensityFunction entrances() {
+    public static DensityFunction entrances() {
         DensityFunction densityFunction = DensityFunctions.cacheOnce(DensityFunctions.noise(getNoise(Noises.SPAGHETTI_3D_RARITY), 2.0D, 1.0D));
         DensityFunction densityFunction2 = DensityFunctions.mappedNoise(getNoise(Noises.SPAGHETTI_3D_THICKNESS), -0.065D, -0.088D);
         DensityFunction densityFunction3 = DensityFunctions.weirdScaledSampler(densityFunction, getNoise(Noises.SPAGHETTI_3D_1), DensityFunctions.WeirdScaledSampler.RarityValueMapper.TYPE1);
@@ -125,7 +125,7 @@ public class NoiseRouterData {
         return DensityFunctions.cacheOnce(DensityFunctions.min(densityFunction8, DensityFunctions.add(densityFunction6, densityFunction5)));
     }
 
-    private static DensityFunction noodle() {
+    public static DensityFunction noodle() {
         DensityFunction densityFunction = getFunction(Y);
         int i = -64;
         int j = -60;
@@ -139,7 +139,7 @@ public class NoiseRouterData {
         return DensityFunctions.rangeChoice(densityFunction2, -1000000.0D, 0.0D, DensityFunctions.constant(64.0D), DensityFunctions.add(densityFunction3, densityFunction6));
     }
 
-    private static DensityFunction pillars() {
+    public static DensityFunction pillars() {
         double d = 25.0D;
         double e = 0.3D;
         DensityFunction densityFunction = DensityFunctions.noise(getNoise(Noises.PILLAR), 25.0D, 0.3D);
@@ -149,7 +149,7 @@ public class NoiseRouterData {
         return DensityFunctions.cacheOnce(DensityFunctions.mul(densityFunction4, densityFunction3.cube()));
     }
 
-    private static DensityFunction spaghetti2D() {
+    public static DensityFunction spaghetti2D() {
         DensityFunction densityFunction = DensityFunctions.noise(getNoise(Noises.SPAGHETTI_2D_MODULATOR), 2.0D, 1.0D);
         DensityFunction densityFunction2 = DensityFunctions.weirdScaledSampler(densityFunction, getNoise(Noises.SPAGHETTI_2D), DensityFunctions.WeirdScaledSampler.RarityValueMapper.TYPE2);
         DensityFunction densityFunction3 = DensityFunctions.mappedNoise(getNoise(Noises.SPAGHETTI_2D_ELEVATION), 0.0D, (double)Math.floorDiv(-64, 8), 8.0D);
@@ -161,7 +161,7 @@ public class NoiseRouterData {
         return DensityFunctions.max(densityFunction7, densityFunction6).clamp(-1.0D, 1.0D);
     }
 
-    private static DensityFunction underground(DensityFunction densityFunction) {
+    public static DensityFunction underground(DensityFunction densityFunction) {
         DensityFunction densityFunction2 = getFunction(SPAGHETTI_2D);
         DensityFunction densityFunction3 = getFunction(SPAGHETTI_ROUGHNESS_FUNCTION);
         DensityFunction densityFunction4 = DensityFunctions.noise(getNoise(Noises.CAVE_LAYER), 8.0D);
@@ -175,13 +175,13 @@ public class NoiseRouterData {
         return DensityFunctions.max(densityFunction9, densityFunction11);
     }
 
-    private static DensityFunction postProcess(NoiseSettings noiseSettings, DensityFunction densityFunction) {
+    public static DensityFunction postProcess(NoiseSettings noiseSettings, DensityFunction densityFunction) {
         DensityFunction densityFunction2 = DensityFunctions.slide(noiseSettings, densityFunction);
         DensityFunction densityFunction3 = DensityFunctions.blendDensity(densityFunction2);
         return DensityFunctions.mul(DensityFunctions.interpolated(densityFunction3), DensityFunctions.constant(0.64D)).squeeze();
     }
 
-    private static NoiseRouterWithOnlyNoises overworldWithNewCaves(NoiseSettings noiseSettings, boolean bl) {
+    public static NoiseRouterWithOnlyNoises overworldWithNewCaves(NoiseSettings noiseSettings, boolean bl) {
         DensityFunction densityFunction = DensityFunctions.noise(getNoise(Noises.AQUIFER_BARRIER), 0.5D);
         DensityFunction densityFunction2 = DensityFunctions.noise(getNoise(Noises.AQUIFER_FLUID_LEVEL_FLOODEDNESS), 0.67D);
         DensityFunction densityFunction3 = DensityFunctions.noise(getNoise(Noises.AQUIFER_FLUID_LEVEL_SPREAD), 0.7142857142857143D);
@@ -214,7 +214,7 @@ public class NoiseRouterData {
         return new NoiseRouterWithOnlyNoises(densityFunction, densityFunction2, densityFunction3, densityFunction4, densityFunction7, densityFunction8, getFunction(bl ? CONTINENTS_LARGE : CONTINENTS), getFunction(bl ? EROSION_LARGE : EROSION), getFunction(bl ? DEPTH_LARGE : DEPTH), getFunction(RIDGES), densityFunction11, densityFunction15, densityFunction17, densityFunction20, densityFunction21);
     }
 
-    private static NoiseRouterWithOnlyNoises noNewCaves(NoiseSettings noiseSettings) {
+    public static NoiseRouterWithOnlyNoises noNewCaves(NoiseSettings noiseSettings) {
         DensityFunction densityFunction = getFunction(SHIFT_X);
         DensityFunction densityFunction2 = getFunction(SHIFT_Z);
         DensityFunction densityFunction3 = DensityFunctions.shiftedNoise2d(densityFunction, densityFunction2, 0.25D, getNoise(Noises.TEMPERATURE));
@@ -224,21 +224,21 @@ public class NoiseRouterData {
         return new NoiseRouterWithOnlyNoises(DensityFunctions.zero(), DensityFunctions.zero(), DensityFunctions.zero(), DensityFunctions.zero(), densityFunction3, densityFunction4, getFunction(CONTINENTS), getFunction(EROSION), getFunction(DEPTH), getFunction(RIDGES), densityFunction5, densityFunction6, DensityFunctions.zero(), DensityFunctions.zero(), DensityFunctions.zero());
     }
 
-    protected static NoiseRouterWithOnlyNoises overworldWithoutCaves(NoiseSettings noiseSettings) {
+    public static NoiseRouterWithOnlyNoises overworldWithoutCaves(NoiseSettings noiseSettings) {
         return noNewCaves(noiseSettings);
     }
 
-    protected static NoiseRouterWithOnlyNoises nether(NoiseSettings noiseSettings) {
+    public static NoiseRouterWithOnlyNoises nether(NoiseSettings noiseSettings) {
         return noNewCaves(noiseSettings);
     }
 
-    protected static NoiseRouterWithOnlyNoises end(NoiseSettings noiseSettings) {
+    public static NoiseRouterWithOnlyNoises end(NoiseSettings noiseSettings) {
         DensityFunction densityFunction = DensityFunctions.cache2d(DensityFunctions.endIslands(0L));
         DensityFunction densityFunction2 = postProcess(noiseSettings, getFunction(SLOPED_CHEESE_END));
         return new NoiseRouterWithOnlyNoises(DensityFunctions.zero(), DensityFunctions.zero(), DensityFunctions.zero(), DensityFunctions.zero(), DensityFunctions.zero(), DensityFunctions.zero(), DensityFunctions.zero(), DensityFunctions.zero(), DensityFunctions.zero(), DensityFunctions.zero(), densityFunction, densityFunction2, DensityFunctions.zero(), DensityFunctions.zero(), DensityFunctions.zero());
     }
 
-    private static NormalNoise seedNoise(PositionalRandomFactory positionalRandomFactory, Registry<NormalNoise.NoiseParameters> registry, Holder<NormalNoise.NoiseParameters> holder) {
+    public static NormalNoise seedNoise(PositionalRandomFactory positionalRandomFactory, Registry<NormalNoise.NoiseParameters> registry, Holder<NormalNoise.NoiseParameters> holder) {
         return Noises.instantiate(positionalRandomFactory, holder.unwrapKey().flatMap(registry::getHolder).orElse(holder));
     }
 
@@ -306,28 +306,28 @@ public class NoiseRouterData {
         return new NoiseRouter(noiseRouterWithOnlyNoises2.barrierNoise(), noiseRouterWithOnlyNoises2.fluidLevelFloodednessNoise(), noiseRouterWithOnlyNoises2.fluidLevelSpreadNoise(), noiseRouterWithOnlyNoises2.lavaNoise(), positionalRandomFactory2, positionalRandomFactory3, noiseRouterWithOnlyNoises2.temperature(), noiseRouterWithOnlyNoises2.vegetation(), noiseRouterWithOnlyNoises2.continents(), noiseRouterWithOnlyNoises2.erosion(), noiseRouterWithOnlyNoises2.depth(), noiseRouterWithOnlyNoises2.ridges(), noiseRouterWithOnlyNoises2.initialDensityWithoutJaggedness(), noiseRouterWithOnlyNoises2.finalDensity(), noiseRouterWithOnlyNoises2.veinToggle(), noiseRouterWithOnlyNoises2.veinRidged(), noiseRouterWithOnlyNoises2.veinGap(), (new OverworldBiomeBuilder()).spawnTarget());
     }
 
-    private static DensityFunction splineWithBlending(DensityFunction densityFunction, DensityFunction densityFunction2, DensityFunction densityFunction3, DensityFunctions.TerrainShaperSpline.SplineType splineType, double d, double e, DensityFunction densityFunction4) {
+    public static DensityFunction splineWithBlending(DensityFunction densityFunction, DensityFunction densityFunction2, DensityFunction densityFunction3, DensityFunctions.TerrainShaperSpline.SplineType splineType, double d, double e, DensityFunction densityFunction4) {
         DensityFunction densityFunction5 = DensityFunctions.terrainShaperSpline(densityFunction, densityFunction2, densityFunction3, splineType, d, e);
         DensityFunction densityFunction6 = DensityFunctions.lerp(DensityFunctions.blendAlpha(), densityFunction4, densityFunction5);
         return DensityFunctions.flatCache(DensityFunctions.cache2d(densityFunction6));
     }
 
-    private static DensityFunction noiseGradientDensity(DensityFunction densityFunction, DensityFunction densityFunction2) {
+    public static DensityFunction noiseGradientDensity(DensityFunction densityFunction, DensityFunction densityFunction2) {
         DensityFunction densityFunction3 = DensityFunctions.mul(densityFunction2, densityFunction);
         return DensityFunctions.mul(DensityFunctions.constant(4.0D), densityFunction3.quarterNegative());
     }
 
-    private static DensityFunction yLimitedInterpolatable(DensityFunction densityFunction, DensityFunction densityFunction2, int i, int j, int k) {
+    public static DensityFunction yLimitedInterpolatable(DensityFunction densityFunction, DensityFunction densityFunction2, int i, int j, int k) {
         return DensityFunctions.interpolated(DensityFunctions.rangeChoice(densityFunction, (double)i, (double)(j + 1), densityFunction2, DensityFunctions.constant((double)k)));
     }
 
-    protected static double applySlide(NoiseSettings noiseSettings, double d, double e) {
+    public static double applySlide(NoiseSettings noiseSettings, double d, double e) {
         double f = (double)((int)e / noiseSettings.getCellHeight() - noiseSettings.getMinCellY());
         d = noiseSettings.topSlideSettings().applySlide(d, (double)noiseSettings.getCellCountY() - f);
         return noiseSettings.bottomSlideSettings().applySlide(d, f);
     }
 
-    protected static double computePreliminarySurfaceLevelScanning(NoiseSettings noiseSettings, DensityFunction densityFunction, int i, int j) {
+    public static double computePreliminarySurfaceLevelScanning(NoiseSettings noiseSettings, DensityFunction densityFunction, int i, int j) {
         for(int k = noiseSettings.getMinCellY() + noiseSettings.getCellCountY(); k >= noiseSettings.getMinCellY(); --k) {
             int l = k * noiseSettings.getCellHeight();
             double d = -0.703125D;
@@ -342,8 +342,8 @@ public class NoiseRouterData {
         return 2.147483647E9D;
     }
 
-    protected static final class QuantizedSpaghettiRarity {
-        protected static double getSphaghettiRarity2D(double value) {
+    public static class QuantizedSpaghettiRarity {
+        public static double getSphaghettiRarity2D(double value) {
             if (value < -0.75D) {
                 return 0.5D;
             } else if (value < -0.5D) {
@@ -355,7 +355,7 @@ public class NoiseRouterData {
             }
         }
 
-        protected static double getSpaghettiRarity3D(double value) {
+        public static double getSpaghettiRarity3D(double value) {
             if (value < -0.5D) {
                 return 0.75D;
             } else if (value < 0.0D) {
