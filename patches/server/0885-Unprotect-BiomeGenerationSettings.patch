From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: balduvian <emmettglaser@gmail.com>
Date: Thu, 17 Mar 2022 20:57:50 -0700
Subject: [PATCH] Unprotect BiomeGenerationSettings


diff --git a/src/main/java/net/minecraft/world/level/biome/BiomeGenerationSettings.java b/src/main/java/net/minecraft/world/level/biome/BiomeGenerationSettings.java
new file mode 100644
index 0000000000000000000000000000000000000000..821000aacc9fd6ee9c7dc37e3ac4d5eb2efb0e8a
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/biome/BiomeGenerationSettings.java
@@ -0,0 +1,100 @@
+package net.minecraft.world.level.biome;
+
+import com.google.common.base.Suppliers;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.mojang.logging.LogUtils;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.MapCodec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+import java.util.Map.Entry;
+import java.util.function.Supplier;
+import java.util.stream.Collectors;
+import net.minecraft.Util;
+import net.minecraft.core.Holder;
+import net.minecraft.core.HolderSet;
+import net.minecraft.util.StringRepresentable;
+import net.minecraft.world.level.levelgen.GenerationStep;
+import net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver;
+import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
+import net.minecraft.world.level.levelgen.feature.Feature;
+import net.minecraft.world.level.levelgen.placement.PlacedFeature;
+import org.slf4j.Logger;
+
+public class BiomeGenerationSettings {
+    public static Logger LOGGER = LogUtils.getLogger();
+    public static BiomeGenerationSettings EMPTY = new BiomeGenerationSettings(ImmutableMap.of(), ImmutableList.of());
+    public static MapCodec<BiomeGenerationSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> instance.group(
+        Codec.simpleMap(GenerationStep.Carving.CODEC, ConfiguredWorldCarver.LIST_CODEC.promotePartial(Util.prefix("Carver: ", LOGGER::error)),
+        StringRepresentable.keys(GenerationStep.Carving.values())).fieldOf("carvers").forGetter((biomeGenerationSettings) -> biomeGenerationSettings.carvers),
+        PlacedFeature.LIST_OF_LISTS_CODEC.promotePartial(Util.prefix("Features: ", LOGGER::error)).fieldOf("features").forGetter((biomeGenerationSettings) -> biomeGenerationSettings.features)
+    ).apply(instance, BiomeGenerationSettings::new));
+    public Map<GenerationStep.Carving, HolderSet<ConfiguredWorldCarver<?>>> carvers;
+    public List<HolderSet<PlacedFeature>> features;
+    public Supplier<List<ConfiguredFeature<?, ?>>> flowerFeatures;
+    public Supplier<Set<PlacedFeature>> featureSet;
+
+    public BiomeGenerationSettings(Map<GenerationStep.Carving, HolderSet<ConfiguredWorldCarver<?>>> carvers, List<HolderSet<PlacedFeature>> features) {
+        this.carvers = carvers;
+        this.features = features;
+        this.flowerFeatures = Suppliers.memoize(() -> features.stream().flatMap(HolderSet::stream).map(Holder::value).flatMap(PlacedFeature::getFeatures).filter((configuredFeature) -> configuredFeature.feature() == Feature.FLOWER).collect(ImmutableList.toImmutableList()));
+        this.featureSet = Suppliers.memoize(() -> features.stream().flatMap(HolderSet::stream).map(Holder::value).collect(Collectors.toSet()));
+    }
+
+    public Iterable<Holder<ConfiguredWorldCarver<?>>> getCarvers(GenerationStep.Carving carverStep) {
+        return Objects.requireNonNullElseGet(this.carvers.get(carverStep), List::of);
+    }
+
+    public List<ConfiguredFeature<?, ?>> getFlowerFeatures() {
+        return this.flowerFeatures.get();
+    }
+
+    public List<HolderSet<PlacedFeature>> features() {
+        return this.features;
+    }
+
+    public boolean hasFeature(PlacedFeature feature) {
+        return this.featureSet.get().contains(feature);
+    }
+
+    public static class Builder {
+        public Map<GenerationStep.Carving, List<Holder<ConfiguredWorldCarver<?>>>> carvers = Maps.newLinkedHashMap();
+        public List<List<Holder<PlacedFeature>>> features = Lists.newArrayList();
+
+        public BiomeGenerationSettings.Builder addFeature(GenerationStep.Decoration featureStep, Holder<PlacedFeature> feature) {
+            return this.addFeature(featureStep.ordinal(), feature);
+        }
+
+        public BiomeGenerationSettings.Builder addFeature(int stepIndex, Holder<PlacedFeature> featureEntry) {
+            this.addFeatureStepsUpTo(stepIndex);
+            this.features.get(stepIndex).add(featureEntry);
+            return this;
+        }
+
+        public BiomeGenerationSettings.Builder addCarver(GenerationStep.Carving carverStep, Holder<? extends ConfiguredWorldCarver<?>> carver) {
+            this.carvers.computeIfAbsent(carverStep, (carving) -> Lists.newArrayList()).add(Holder.hackyErase(carver));
+            return this;
+        }
+
+        public void addFeatureStepsUpTo(int stepIndex) {
+            while(this.features.size() <= stepIndex) {
+                this.features.add(Lists.newArrayList());
+            }
+        }
+
+        public BiomeGenerationSettings build() {
+            return new BiomeGenerationSettings(
+                this.carvers.entrySet().stream().collect(
+                    ImmutableMap.toImmutableMap(Entry::getKey, (entry) -> HolderSet.direct(entry.getValue()))
+                ),
+                this.features.stream().map(HolderSet::direct).collect(ImmutableList.toImmutableList())
+            );
+        }
+    }
+}
