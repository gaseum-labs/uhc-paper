From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: balduvian <emmettglaser@gmail.com>
Date: Mon, 16 May 2022 16:00:43 -0700
Subject: [PATCH] uhc-public-Biome


diff --git a/src/main/java/net/minecraft/world/level/biome/Biome.java b/src/main/java/net/minecraft/world/level/biome/Biome.java
index 32fc9f9162aafe312ed757be2d03577b5f95841d..d2d9de12224a0a54a261fa4137f923358f4608b6 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biome.java
@@ -34,8 +34,8 @@ import net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
 
-public final class Biome {
-    public static final Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> {
+public class Biome {
+    public static Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> {
         return instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> {
             return biome.climateSettings;
         }), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> {
@@ -48,7 +48,7 @@ public final class Biome {
             return biome.mobSettings;
         })).apply(instance, Biome::new);
     });
-    public static final Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create((instance) -> {
+    public static Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create((instance) -> {
         return instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> {
             return biome.climateSettings;
         }), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> {
@@ -59,22 +59,22 @@ public final class Biome {
             return new Biome(weather, category, effects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY);
         });
     });
-    public static final Codec<Holder<Biome>> CODEC = RegistryFileCodec.create(Registry.BIOME_REGISTRY, DIRECT_CODEC);
-    public static final Codec<HolderSet<Biome>> LIST_CODEC = RegistryCodecs.homogeneousList(Registry.BIOME_REGISTRY, DIRECT_CODEC);
-    private static final PerlinSimplexNoise TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(new LegacyRandomSource(1234L)), ImmutableList.of(0));
-    static final PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(new LegacyRandomSource(3456L)), ImmutableList.of(-2, -1, 0));
+    public static Codec<Holder<Biome>> CODEC = RegistryFileCodec.create(Registry.BIOME_REGISTRY, DIRECT_CODEC);
+    public static Codec<HolderSet<Biome>> LIST_CODEC = RegistryCodecs.homogeneousList(Registry.BIOME_REGISTRY, DIRECT_CODEC);
+    public static PerlinSimplexNoise TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(new LegacyRandomSource(1234L)), ImmutableList.of(0));
+    public static PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE = new PerlinSimplexNoise(new WorldgenRandom(new LegacyRandomSource(3456L)), ImmutableList.of(-2, -1, 0));
     /** @deprecated */
     @Deprecated(
         forRemoval = true
     )
-    public static final PerlinSimplexNoise BIOME_INFO_NOISE = new PerlinSimplexNoise(new WorldgenRandom(new LegacyRandomSource(2345L)), ImmutableList.of(0));
-    private static final int TEMPERATURE_CACHE_SIZE = 1024;
-    private final Biome.ClimateSettings climateSettings;
-    private final BiomeGenerationSettings generationSettings;
-    private final MobSpawnSettings mobSettings;
-    private final Biome.BiomeCategory biomeCategory;
-    private final BiomeSpecialEffects specialEffects;
-    private final ThreadLocal<Long2FloatLinkedOpenHashMap> temperatureCache = ThreadLocal.withInitial(() -> {
+    public static PerlinSimplexNoise BIOME_INFO_NOISE = new PerlinSimplexNoise(new WorldgenRandom(new LegacyRandomSource(2345L)), ImmutableList.of(0));
+    public static int TEMPERATURE_CACHE_SIZE = 1024;
+    public Biome.ClimateSettings climateSettings;
+    public BiomeGenerationSettings generationSettings;
+    public MobSpawnSettings mobSettings;
+    public Biome.BiomeCategory biomeCategory;
+    public BiomeSpecialEffects specialEffects;
+    public ThreadLocal<Long2FloatLinkedOpenHashMap> temperatureCache = ThreadLocal.withInitial(() -> {
         return Util.make(() -> {
             Long2FloatLinkedOpenHashMap long2FloatLinkedOpenHashMap = new Long2FloatLinkedOpenHashMap(1024, 0.25F) {
                 protected void rehash(int i) {
@@ -84,8 +84,8 @@ public final class Biome {
             return long2FloatLinkedOpenHashMap;
         });
     });
-
-    Biome(Biome.ClimateSettings weather, Biome.BiomeCategory category, BiomeSpecialEffects effects, BiomeGenerationSettings generationSettings, MobSpawnSettings spawnSettings) {
+    
+    public Biome(Biome.ClimateSettings weather, Biome.BiomeCategory category, BiomeSpecialEffects effects, BiomeGenerationSettings generationSettings, MobSpawnSettings spawnSettings) {
         this.climateSettings = weather;
         this.generationSettings = generationSettings;
         this.mobSettings = spawnSettings;
@@ -109,7 +109,7 @@ public final class Biome {
         return this.getDownfall() > 0.85F;
     }
 
-    private float getHeightAdjustedTemperature(BlockPos pos) {
+    public float getHeightAdjustedTemperature(BlockPos pos) {
         float f = this.climateSettings.temperatureModifier.modifyTemperature(pos, this.getBaseTemperature());
         if (pos.getY() > 80) {
             float g = (float)(TEMPERATURE_NOISE.getValue((double)((float)pos.getX() / 8.0F), (double)((float)pos.getZ() / 8.0F), false) * 8.0D);
@@ -209,7 +209,7 @@ public final class Biome {
         return this.specialEffects.getGrassColorModifier().modifyColor(x, z, i);
     }
 
-    private int getGrassColorFromTexture() {
+    public int getGrassColorFromTexture() {
         double d = (double)Mth.clamp(this.climateSettings.temperature, 0.0F, 1.0F);
         double e = (double)Mth.clamp(this.climateSettings.downfall, 0.0F, 1.0F);
         return GrassColor.get(d, e);
@@ -219,17 +219,17 @@ public final class Biome {
         return this.specialEffects.getFoliageColorOverride().orElseGet(this::getFoliageColorFromTexture);
     }
 
-    private int getFoliageColorFromTexture() {
+    public int getFoliageColorFromTexture() {
         double d = (double)Mth.clamp(this.climateSettings.temperature, 0.0F, 1.0F);
         double e = (double)Mth.clamp(this.climateSettings.downfall, 0.0F, 1.0F);
         return FoliageColor.get(d, e);
     }
 
-    public final float getDownfall() {
+    public float getDownfall() {
         return this.climateSettings.downfall;
     }
 
-    public final float getBaseTemperature() {
+    public float getBaseTemperature() {
         return this.climateSettings.temperature;
     }
 
@@ -237,11 +237,11 @@ public final class Biome {
         return this.specialEffects;
     }
 
-    public final int getWaterColor() {
+    public int getWaterColor() {
         return this.specialEffects.getWaterColor();
     }
 
-    public final int getWaterFogColor() {
+    public int getWaterFogColor() {
         return this.specialEffects.getWaterFogColor();
     }
 
@@ -264,8 +264,8 @@ public final class Biome {
     public Optional<Music> getBackgroundMusic() {
         return this.specialEffects.getBackgroundMusic();
     }
-
-    Biome.BiomeCategory getBiomeCategory() {
+    
+    public Biome.BiomeCategory getBiomeCategory() {
         return this.biomeCategory;
     }
 
@@ -277,20 +277,20 @@ public final class Biome {
 
     public static class BiomeBuilder {
         @Nullable
-        private Biome.Precipitation precipitation;
+        public Biome.Precipitation precipitation;
         @Nullable
-        private Biome.BiomeCategory biomeCategory;
+        public Biome.BiomeCategory biomeCategory;
         @Nullable
-        private Float temperature;
-        private Biome.TemperatureModifier temperatureModifier = Biome.TemperatureModifier.NONE;
+        public Float temperature;
+        public Biome.TemperatureModifier temperatureModifier = Biome.TemperatureModifier.NONE;
         @Nullable
-        private Float downfall;
+        public Float downfall;
         @Nullable
-        private BiomeSpecialEffects specialEffects;
+        public BiomeSpecialEffects specialEffects;
         @Nullable
-        private MobSpawnSettings mobSpawnSettings;
+        public MobSpawnSettings mobSpawnSettings;
         @Nullable
-        private BiomeGenerationSettings generationSettings;
+        public BiomeGenerationSettings generationSettings;
 
         public static Biome.BiomeBuilder from(Biome biome) {
             return (new Biome.BiomeBuilder()).precipitation(biome.getPrecipitation()).biomeCategory(biome.getBiomeCategory()).temperature(biome.getBaseTemperature()).downfall(biome.getDownfall()).specialEffects(biome.getSpecialEffects()).generationSettings(biome.getGenerationSettings()).mobSpawnSettings(biome.getMobSettings());
@@ -371,13 +371,13 @@ public final class Biome {
         UNDERGROUND("underground"),
         MOUNTAIN("mountain");
 
-        public static final Codec<Biome.BiomeCategory> CODEC = StringRepresentable.fromEnum(Biome.BiomeCategory::values, Biome.BiomeCategory::byName);
-        private static final Map<String, Biome.BiomeCategory> BY_NAME = Arrays.stream(values()).collect(Collectors.toMap(Biome.BiomeCategory::getName, (category) -> {
+        public static Codec<Biome.BiomeCategory> CODEC = StringRepresentable.fromEnum(Biome.BiomeCategory::values, Biome.BiomeCategory::byName);
+        public static Map<String, Biome.BiomeCategory> BY_NAME = Arrays.stream(values()).collect(Collectors.toMap(Biome.BiomeCategory::getName, (category) -> {
             return category;
         }));
-        private final String name;
+        public String name;
 
-        private BiomeCategory(String name) {
+        BiomeCategory(String name) {
             this.name = name;
         }
 
@@ -396,7 +396,7 @@ public final class Biome {
     }
 
     static class ClimateSettings {
-        public static final MapCodec<Biome.ClimateSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
+        public static MapCodec<Biome.ClimateSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
             return instance.group(Biome.Precipitation.CODEC.fieldOf("precipitation").forGetter((climateSettings) -> {
                 return climateSettings.precipitation;
             }), Codec.FLOAT.fieldOf("temperature").forGetter((climateSettings) -> {
@@ -407,12 +407,12 @@ public final class Biome {
                 return climateSettings.downfall;
             })).apply(instance, Biome.ClimateSettings::new);
         });
-        final Biome.Precipitation precipitation;
-        final float temperature;
-        final Biome.TemperatureModifier temperatureModifier;
-        final float downfall;
-
-        ClimateSettings(Biome.Precipitation precipitation, float temperature, Biome.TemperatureModifier temperatureModifier, float downfall) {
+        public Biome.Precipitation precipitation;
+        public float temperature;
+        public Biome.TemperatureModifier temperatureModifier;
+        public float downfall;
+    
+        public ClimateSettings(Biome.Precipitation precipitation, float temperature, Biome.TemperatureModifier temperatureModifier, float downfall) {
             this.precipitation = precipitation;
             this.temperature = temperature;
             this.temperatureModifier = temperatureModifier;
@@ -425,13 +425,13 @@ public final class Biome {
         RAIN("rain"),
         SNOW("snow");
 
-        public static final Codec<Biome.Precipitation> CODEC = StringRepresentable.fromEnum(Biome.Precipitation::values, Biome.Precipitation::byName);
-        private static final Map<String, Biome.Precipitation> BY_NAME = Arrays.stream(values()).collect(Collectors.toMap(Biome.Precipitation::getName, (precipitation) -> {
+        public static Codec<Biome.Precipitation> CODEC = StringRepresentable.fromEnum(Biome.Precipitation::values, Biome.Precipitation::byName);
+        public static Map<String, Biome.Precipitation> BY_NAME = Arrays.stream(values()).collect(Collectors.toMap(Biome.Precipitation::getName, (precipitation) -> {
             return precipitation;
         }));
-        private final String name;
+        public String name;
 
-        private Precipitation(String name) {
+        Precipitation(String name) {
             this.name = name;
         }
 
@@ -473,14 +473,14 @@ public final class Biome {
             }
         };
 
-        private final String name;
-        public static final Codec<Biome.TemperatureModifier> CODEC = StringRepresentable.fromEnum(Biome.TemperatureModifier::values, Biome.TemperatureModifier::byName);
-        private static final Map<String, Biome.TemperatureModifier> BY_NAME = Arrays.stream(values()).collect(Collectors.toMap(Biome.TemperatureModifier::getName, (temperatureModifier) -> {
+        public String name;
+        public static Codec<Biome.TemperatureModifier> CODEC = StringRepresentable.fromEnum(Biome.TemperatureModifier::values, Biome.TemperatureModifier::byName);
+        public static Map<String, Biome.TemperatureModifier> BY_NAME = Arrays.stream(values()).collect(Collectors.toMap(Biome.TemperatureModifier::getName, (temperatureModifier) -> {
             return temperatureModifier;
         }));
 
         public abstract float modifyTemperature(BlockPos pos, float temperature);
-
+    
         TemperatureModifier(String name) {
             this.name = name;
         }
